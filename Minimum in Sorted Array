Intuition:

The code aims to find the minimum element in a rotated sorted array. 
It utilizes the binary search algorithm to efficiently narrow down the search space and locate the minimum element.

Approach:

1.  Initialize two pointers, left and right, representing the start and end indices of the search space.
2.  Enter a while loop as long as left is less than right.
3.  Calculate the midpoint mid using the formula mid = left + (right - left) / 2.
4.  Compare the value at index mid with the value at index right to determine which half of the array contains the minimum element.
         If nums[mid] > nums[right], it means the minimum element lies in the right half of the array. Update left = mid + 1 to search in the right half.
         Otherwise, the minimum element lies in the left half of the array, including the mid index. Update right = mid to search in the left half.
5.  Repeat steps 3-4 until the search space is narrowed down to a single element, i.e., left >= right.
6.  Return the value at nums[left] as the minimum element.


Complexity:

Time Complexity:
The binary search approach has a time complexity of O(log n), where n is the size of the input array nums.
The search space is halved in each iteration, leading to efficient searching.

Space Complexity:
The code has a space complexity of O(1) as it uses a constant amount of extra space for the variables left, right, and mid.
No additional data structures are used that scale with the input size.



class Solution {
public:
    int findMin(vector<int>& nums) {
        int left = 0;
        int right = nums.size() - 1;

        while (left < right) {
            int mid = left + (right - left) / 2;

            if (nums[mid] > nums[right]) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }

        return nums[left];
    }
};
